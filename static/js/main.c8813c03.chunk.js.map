{"version":3,"sources":["logo.svg","reducers/filtersReducer.js","reducers/index.js","store.js","components/Filters.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","items","persistConfig","key","storage","whitelist","rootReducer","combineReducers","filter","state","action","type","console","log","slice","length","persistReducer","store","createStore","persistor","persistStore","connect","filters","dispatch","addFilter","delFilter","map","onClick","App","className","src","logo","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,qMCArCC,EAAe,CACnBC,MAAO,I,QCKHC,EAAgB,CACpBC,IAAK,OACLC,Q,OAAAA,EACAC,UAAW,CAAC,WAGRC,EAAcC,YAAgB,CAClCC,ODTa,WAAyC,IAA/BC,EAA8B,uDAAtBT,EAAcU,EAAQ,uCACrD,OAAQA,EAAOC,MACb,IAAK,aAEH,OADAC,QAAQC,IAAI,cACL,2BACFJ,GADL,IAEER,MAAM,GAAD,mBAAMQ,EAAMR,OAAZ,CAAmB,aAE5B,IAAK,aAEH,OADAW,QAAQC,IAAI,iBACL,2BACFJ,GADL,IAEER,MAAOQ,EAAMR,MAAMa,MAAM,EAAGL,EAAMR,MAAMc,OAAS,KAErD,QACE,OAAON,MCHEO,cAAed,EAAeI,GCVhCW,EAAQC,YAAYZ,EAFZ,IAKRa,EAAYC,YAAaH,G,yDCcvBI,G,MAAAA,aATS,SAACZ,GAAD,MAAY,CAClCa,QAASb,EAAMD,OAAOP,UAGG,SAACsB,GAAD,MAAe,CACxCC,UAAW,kBAAMD,EAAS,CAAEZ,KAAM,gBAClCc,UAAW,kBAAMF,EAAS,CAAEZ,KAAM,mBAGrBU,EApBC,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,QAASE,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,UACrC,OACE,6BACE,wCACA,4BAAKH,GAAWA,EAAQI,KAAI,SAAClB,GAAD,OAAY,0CACxC,4BAAQmB,QAASH,GAAjB,cACA,4BAAQG,QAASF,GAAjB,sBCUSG,E,uKAXX,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kBAAC,EAAD,Y,GANQC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAD,CAAUvB,MAAOA,GACf,kBAAC,IAAMwB,WAAP,KACE,kBAAC,IAAD,CAAatB,UAAWA,GACtB,kBAAC,EAAD,SAINuB,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.c8813c03.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const initialState = {\n  items: [],\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case \"ADD_FILTER\":\n      console.log(\"add filter\");\n      return {\n        ...state,\n        items: [...state.items, \"filter\"],\n      };\n    case \"DEL_FILTER\":\n      console.log(\"remove filter\");\n      return {\n        ...state,\n        items: state.items.slice(0, state.items.length - 1),\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport filtersReducer from \"./filtersReducer\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // Uses browser window local storage\n\n// redux-persist configuration object\nconst persistConfig = {\n  key: \"root\", // Path to store in local storage (/root)\n  storage, // type of storage\n  whitelist: [\"filter\"], // array of reducers to be persisted\n};\n\nconst rootReducer = combineReducers({\n  filter: filtersReducer,\n});\n\nexport default persistReducer(persistConfig, rootReducer); // wrap-up our reducer with persist capabilities\n","import { createStore } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nexport const store = createStore(rootReducer, initialState);\n\n// Cached version of store\nexport const persistor = persistStore(store);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nconst Filters = ({ filters, addFilter, delFilter }) => {\n  return (\n    <div>\n      <h1>Filters:</h1>\n      <ul>{filters && filters.map((filter) => <li>filter</li>)}</ul>\n      <button onClick={addFilter}>Add Filter</button>\n      <button onClick={delFilter}>Remove Filter</button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filters: state.filter.items,\n});\n\nconst mapDispathcToProps = (dispatch) => ({\n  addFilter: () => dispatch({ type: \"ADD_FILTER\" }),\n  delFilter: () => dispatch({ type: \"DEL_FILTER\" }),\n});\n\nexport default connect(mapStateToProps, mapDispathcToProps)(Filters);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Filters from \"./components/Filters\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Filters />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\"; // same as Provider, but persistent\nimport { store, persistor } from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}