{"version":3,"sources":["logo.svg","reducers/filtersReducer.js","reducers/authReducer.js","reducers/index.js","store.js","components/Filters.js","actions/filterActions.js","actions/types.js","actions/authActions.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","user","persistConfig","key","storage","whitelist","rootReducer","combineReducers","filter","state","action","type","payload","console","log","slice","length","Object","keys","includes","persistReducer","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","mapDispathcToProps","addFilter","userId","dispatch","delFilter","logout","connect","filters","history","useHistory","username","toUpperCase","onClick","push","id","map","Login","password","handleClick","props","login","name","onChange","e","setState","target","value","this","Component","userObj","users","withRouter","App","className","src","logo","alt","exact","path","component","Filters","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f249c7ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const initialState = {\n  // id: [filter1, filter2],\n  // 1: [filter3, filter4]\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case \"ADD_FILTER\":\n      return {\n        ...state,\n        [action.payload]: [...state[action.payload], \"filter\"],\n      };\n    case \"DEL_FILTER\":\n      console.log(\"remove filter\");\n      return {\n        ...state,\n        [action.payload]: state[action.payload].slice(\n          0,\n          state[action.payload].length - 1\n        ),\n      };\n\n    default:\n      return state;\n  }\n}\n","const initialState = {\n  user: {},\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case \"LOGIN\":\n      if (!Object.keys(state).includes(action.payload)) {\n        return {\n          ...state,\n          user: { ...action.payload },\n        };\n      }\n      return state;\n    case \"LOGOUT\":\n      return {\n        ...state,\n        user: {},\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport filtersReducer from \"./filtersReducer\";\nimport authReducer from \"./authReducer\";\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\"; // Uses browser window local storage\n\n// redux-persist configuration object\nconst persistConfig = {\n  key: \"root\", // Path to store in local storage (/root)\n  storage, // type of storage\n  whitelist: [\"filter\"], // array of reducers to be persisted\n};\n\nconst rootReducer = combineReducers({\n  filter: filtersReducer,\n  user: authReducer,\n});\n\nexport default persistReducer(persistConfig, rootReducer); // wrap-up our reducer with persist capabilities\n","import { createStore, applyMiddleware } from \"redux\";\nimport { persistStore } from \"redux-persist\";\nimport rootReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nexport const store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\n// Cached version of store\nexport const persistor = persistStore(store);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { addFilter, delFilter } from \"../actions/filterActions\";\nimport { logout } from \"../actions/authActions\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Filters = ({ filters, user, addFilter, delFilter, logout }) => {\n  let history = useHistory();\n\n  const handleLogout = () => {\n    logout();\n    history.push(\"/\");\n  };\n\n  return (\n    <div>\n      <h1>Hello {user.username && user.username.toUpperCase()}!</h1>\n      <button onClick={() => handleLogout()}>Logout</button>\n      <h1>Your filters:</h1>\n      <ul>\n        {user.id &&\n          filters[user.id] &&\n          filters[user.id].map((filter) => <li>{filter}</li>)}\n      </ul>\n      <button onClick={() => addFilter(user.id)}>Add Filter</button>\n      <button onClick={() => delFilter(user.id)}>Remove Filter</button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  filters: state.filter,\n  user: state.user.user,\n});\n\nconst mapDispathcToProps = {\n  addFilter,\n  delFilter,\n  logout,\n};\n\nexport default connect(mapStateToProps, mapDispathcToProps)(Filters);\n","import { ADD_FILTER, DEL_FILTER } from \"./types\";\n\nexport const addFilter = (userId) => (dispatch) => {\n  dispatch({ type: ADD_FILTER, payload: userId });\n};\n\nexport const delFilter = (userId) => (dispatch) => {\n  dispatch({ type: DEL_FILTER, payload: userId });\n};\n","export const ADD_FILTER = \"ADD_FILTER\";\nexport const DEL_FILTER = \"DEL_FILTER\";\n","import users from \"./users.json\";\n\nexport const login = (userObj) => (dispatch) => {\n  const user = users.filter(\n    (user) =>\n      userObj.username === user.username && userObj.password === user.password\n  )[0];\n  user && dispatch({ type: \"LOGIN\", payload: user });\n  return user;\n};\n\nexport const logout = () => (dispatch) => {\n  dispatch({ type: \"LOGOUT\" });\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../actions/authActions\";\nimport { withRouter } from \"react-router-dom\";\n\nclass Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n  };\n\n  handleClick = () => {\n    const user = this.props.login(this.state);\n    user && this.props.history.push(\"/dashboard\");\n  };\n\n  render() {\n    return (\n      <div>\n        Username:\n        <input\n          name=\"username\"\n          onChange={(e) => this.setState({ [e.target.name]: e.target.value })}\n          type=\"text\"\n        />\n        Password:\n        <input\n          name=\"password\"\n          onChange={(e) => this.setState({ [e.target.name]: e.target.value })}\n          type=\"password\"\n        />\n        <button onClick={this.handleClick}>Login</button>\n      </div>\n    );\n  }\n}\n\nconst mapDispathcToProps = {\n  login,\n};\n\nexport default connect(null, mapDispathcToProps)(withRouter(Login));\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Filters from \"./components/Filters\";\nimport Login from \"./components/Login\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <Switch>\n              <Route name=\"login\" exact path=\"/\" component={Login} />\n              <Route\n                name=\"dashboard\"\n                exact\n                path=\"/dashboard\"\n                component={Filters}\n              />\n              <Filters />\n            </Switch>\n          </header>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\"; // same as Provider, but persistent\nimport { store, persistor } from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}